au BufNewFile,BufRead *.less set filetype=css
au BufNewFile,BufRead *.styl set filetype=css
au BufNewFile,BufRead *.jade set filetype=html
au BufNewFile,BufRead *.h set filetype=c

set omnifunc=csscomplete#CompleteCSS
set wrap

autocmd Filetype python setlocal ts=4 sw=4 noexpandtab
autocmd Filetype javascript setlocal ts=4 sw=4 noexpandtab
autocmd Filetype js setlocal ts=4 sw=4 noexpandtab
autocmd Filetype c setlocal ts=4 sw=4 noexpandtab
autocmd Filetype html setlocal ts=4 sw=4 noexpandtab

autocmd BufWrite *.c :call Uncrustify('C')
autocmd BufWrite *.C :call Uncrustify('C')
autocmd BufWrite *.h :call Uncrustify('C')
autocmd BufWrite *.H :call Uncrustify('C')

set wildmode=full
set wildmenu
"colorscheme aqua
"hi PreProc ctermfg=cyan cterm=bold guifg=#FF00FF
hi clear SignColumn
if has('cscope')
  set cscopetag cscopeverbose

  if has('quickfix')
    set cscopequickfix=s-,c-,d-,i-,t-,e-
  endif

  cnoreabbrev csa cs add
  cnoreabbrev csf cs find
  cnoreabbrev csk cs kill
  cnoreabbrev csr cs reset
  cnoreabbrev css cs show
  cnoreabbrev csh cs help

  command -nargs=0 Cscope cs add $VIMSRC/src/cscope.out $VIMSRC/src
endif
"
"nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
"    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
"
"nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
"    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>
"
"nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
"    nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
"    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
"
"
"    """"""""""""" key map timeouts
"    "
"    " By default Vim will only wait 1 second for each keystroke in a mapping.
"    " You may find that too short with the above typemaps.  If so, you should
"    " either turn off mapping timeouts via 'notimeout'.
"    "
"    "set notimeout
"    "
"    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
"    " with your own personal favorite value (in milliseconds):
"    "
"    "set timeoutlen=4000
"    "
"    " Either way, since mapping timeout settings by default also set the
"    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
"    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
"    " delays as vim waits for a keystroke after you hit ESC (it will be
"    " waiting to see if the ESC is actually part of a key code like <F1>).
"    "
"    "set ttimeout
"    "
"    " personally, I find a tenth of a second to work well for key code
"    " timeouts. If you experience problems and have a slow terminal or network
"    " connection, set it higher.  If you don't set ttimeoutlen, the value for
"    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
"    "
"    "set ttimeoutlen=100
"
"        nmap <silent> <C-N> :cn<CR>zv
"        nmap <silent> <C-P> :cp<CR>zv
"
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }
" Restore cursor position, window position, and last search after running a
" command.
function! Preserve(command)
  " Save the last search.
  let search = @/

  " Save the current cursor position.
  let cursor_position = getpos('.')

  " Save the current window position.
  normal! H
  let window_position = getpos('.')
  call setpos('.', cursor_position)

  " Execute the command.
  execute a:command

  " Restore the last search.
  let @/ = search

  " Restore the previous window position.
  call setpos('.', window_position)
  normal! zt

  " Restore the previous cursor position.
  call setpos('.', cursor_position)
endfunction

" Specify path to your Uncrustify configuration file.
let g:uncrustify_cfg_file_path =
    \ shellescape(fnamemodify('~/conf/uncrustify.cfg', ':p'))

" Don't forget to add Uncrustify executable to $PATH (on Unix) or
" %PATH% (on Windows) for this command to work.
function! Uncrustify(language)
  call Preserve(':silent %!uncrustify'
      \ . ' -q '
      \ . ' -l ' . a:language
      \ . ' -c ' . g:uncrustify_cfg_file_path)
endfunction
